<?php

namespace {{ controllerNamespace }};

use App\Http\Controllers\AppBaseController;
use Illuminate\Routing\Controllers\HasMiddleware;
use Illuminate\Routing\Controllers\Middleware;
use {{ requestNamespace }}\{{ createRequest }};
use {{ requestNamespace }}\{{ updateRequest }};
use {{ modelNamespace }}\{{ model }};
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;


/**
 * Class {{ controlador }}
 */
class {{ controlador }} extends AppbaseController implements HasMiddleware
{


    /**
     * @return array
     */
    public static function middleware(): array
    {
        return [
        new Middleware('abilities:ver {{ variable_plural }}', only: ['index', 'show']),
        new Middleware('abilities:crear {{ variable_plural }}', only: ['store']),
        new Middleware('abilities:editar {{ variable_plural }}', only: ['update']),
        new Middleware('abilities:eliminar {{ variable_plural }}', only: ['destroy']),
        ];
    }


    /**
     * Display a listing of the {{ tableNameM }}.
     * GET|HEAD /{{ variable_plural }}
     */
    public function index(Request $request): JsonResponse
    {
        $query = {{ model }}::query();

        if ($request->get('skip')) {
            $query->skip($request->get('skip'));
        }

        if ($request->get('limit')) {
            $query->limit($request->get('limit'));
        }

        ${{ variable_plural }} = $query->get();

        return $this->sendResponse(${{ variable_plural }}->toArray(), '{{ variable_plural }} recuperados con éxito.');
    }


    /**
     * Store a newly created {{ model }} in storage.
     * POST /{{ variable_plural }}
     */
    public function store({{ createRequest }} $request): JsonResponse
    {
        $input = $request->all();

        ${{ variable_plural }} = {{ model }}::create($input);

        return $this->sendResponse(${{ variable_plural }}->toArray(), '{{ model }} creado con éxito.');
    }


    /**
     * Display the specified {{ model }}.
     * GET|HEAD /{{ variable_plural }}/{id}
     */
    public function show({{ model }} ${{ variable }})
    {
        return $this->sendResponse(${{ variable }}->toArray(), '{{ model }} recuperado con éxito.');
    }



    /**
    * Update the specified {{ model }} in storage.
    * PUT/PATCH /{{ variable_plural }}/{id}
    */
    public function update({{ updateRequest }} $request, $id): JsonResponse
    {
        ${{ variable }} = {{ model }}::findOrFail($id);
        ${{ variable }}->update($request->validated());
        return $this->sendResponse(${{ variable }}, '{{ model }} actualizado con éxito.');
    }

    /**
    * Remove the specified {{ model }} from storage.
    * DELETE /{{ variable_plural }}/{id}
    */
    public function destroy({{ model }} ${{ variable }}): JsonResponse
    {
        ${{ variable }}->delete();
        return $this->sendResponse(null, '{{ model }} eliminado con éxito.');
    }
}
